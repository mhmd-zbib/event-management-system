name: Build and Deploy

on:
  push:
    branches:
      - main
      - master

jobs:
  test-and-build:
    name: Test and Build Microservices
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 21

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run Unit Tests
        run: mvn clean test -B

      - name: Build All Microservices (using parent POM)
        run: mvn clean package -B

      - name: Upload Build Artifacts (JAR files)
        uses: actions/upload-artifact@v3
        with:
          name: jars
          path: user-service/target/*.jar

  containerize:
    name: Containerize User Service
    runs-on: ubuntu-latest
    needs: test-and-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Build Artifacts (JAR files)
        uses: actions/download-artifact@v3
        with:
          name: jars

      - name: Build Docker Image for user-service
        run: |
          # Build Docker image for user-service
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/user-service:latest ./user-service

          # List Docker images to verify the build and tag
          docker images

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Push Docker Image for user-service to DockerHub
        run: |
          # Push Docker image for user-service
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/user-service:latest




#name: Build and Deploy
#
#on:
#  push:
#    branches:
#      - main
#      - master
#
#jobs:
#  test-and-build:
#    name: Test and Build Microservices
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Setup JDK 21
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'corretto'
#          java-version: 21
#
#      - name: Cache Maven dependencies
#        uses: actions/cache@v3
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#          restore-keys: |
#            ${{ runner.os }}-maven-
#
#      - name: Run Unit Tests
#        run: mvn clean test -B
#
#      - name: Build All Microservices (using parent POM)
#        run: mvn clean package -B
#
#      - name: Upload Build Artifacts (JAR files)
#        uses: actions/upload-artifact@v3
#        with:
#          name: jars
#          path: |
#            user-service/target/*.jar
#            api-gateway/target/*.jar
#            discovery-server/target/*.jar
#            config-server/target/*.jar
#            provider-service/target/*.jar
#
#  containerize:
#    name: Containerize Microservices
#    runs-on: ubuntu-latest
#    needs: test-and-build
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Download Build Artifacts (JAR files)
#        uses: actions/download-artifact@v3
#        with:
#          name: jars
#
#      # Build and push Docker images for all microservices
#      - name: Build Docker Images
#        run: |
#          # Build Docker image for user-service
#          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/user-service:latest ./user-service
#
#          # Build Docker image for api-gateway
#          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest ./api-gateway
#
#          # Build Docker image for discovery-server
#          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/discovery-server:latest ./discovery-server
#
#          # Build Docker image for config-server
#          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/config-server:latest ./config-server
#
#          # Build Docker image for provider-service
#          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/provider-service:latest ./provider-service
#
#          # List Docker images to verify the build
#          docker images
#
#  push-images:
#    name: Push Docker Images to DockerHub
#    runs-on: ubuntu-latest
#    needs: containerize
#    steps:
#      - name: Login to DockerHub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
#
#      # Verify Docker login
#      - name: Check Docker login
#        run: docker info
#
#      # Push Docker images for all microservices to Docker Hub
#      - name: Push User Service Image
#        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/user-service:latest
#
#      - name: Push API Gateway Image
#        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway:latest
#
#      - name: Push Discovery Server Image
#        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/discovery-server:latest
#
#      - name: Push Config Server Image
#        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/config-server:latest
#
#      - name: Push Provider Service Image
#        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/provider-service:latest
